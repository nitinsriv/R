Player_name <- c("Rohit","Kohli","dhoni")
Total_runs <- c(5000,7200,8900)
Strike_rate <- c("84.22","89.12","87")
team1 <- data.frame(Player_name,Total_runs,Strike_rate)
View(team1)
View(team1)
View(team1)
View(team1)
View(team1)
View(team1)
supp <- c("OJ","VC","OJ","VC","OJ","VC")
dose <- c(0.5,0.5,1.0,1.0,2.0,2.0)
len <- c(13.23,7.98,22.70,16.77,26.06,26.14)
df <- dataframe(supp,dose,len)
df <- data.frame(supp,dose,len)
View(df)
View(df)
aggregate_result <- aggregate(df,list(df$supp),sum)
aggregate_result <- aggregate(df,list(df$supp),mean)
aggregate_result <- aggregate(df,list(df$supp),mean)
View(aggregate_result)
View(aggregate_result)
tapply_result <- tapply(df,df$supp,mean)
tapply_result <- tapply(df$len,df$supp,mean)
tapply_len_result <- tapply(df$len,df$supp,mean)
View(aggregate_result)
View(aggregate_result)
tapply_len_result <- tapply(df$len,df$supp,mean)
print(typeof(aggregate_result))
print(class(aggregate_result))
tapply_len_result <- tapply(df$len,df$supp,mean)
print(class(tapply_len_result))
tapply_len_result <- tapply(df$len,df$supp,mean)
prinf(tapply_len_result)
print(class(tapply_len_result))
print(tapply_len_result)
#grouping on supp
tapply_dose_result <- tapply(df$dose,df$supp,mean)
print(tapply_dose_result)
print(class(tapply_dose_result))
#combine above results
tapply_combine_result <- data.frame(tapply_len_result,tapply_dose_result)
View(tapply_combine_result)
View(tapply_combine_result)
timespent = list()
#usage of aggregate
#note class of return type. It's dataframe.
timspent["aggregate"] = system.time(
aggregate_result <- aggregate(df,list(df$supp),mean))
print(timespent["aggregate"])
print(class(aggregate_result))
timespent = list()
#usage of aggregate
#note class of return type. It's dataframe.
timspent[["aggregate"] = system.time(
aggregate_result <- aggregate(df,list(df$supp),mean))
print(timespent["aggregate"])
timespent = list()
#usage of aggregate
#note class of return type. It's dataframe.
timspent[["aggregate"]] = system.time(
aggregate_result <- aggregate(df,list(df$supp),mean))
print(timespent[["aggregate"]])
print(class(aggregate_result))
timespent = list()
#usage of aggregate
#note class of return type. It's dataframe.
timespent[["aggregate"]] = system.time(
aggregate_result <- aggregate(df,list(df$supp),mean))
print(timespent[["aggregate"]])
print(class(aggregate_result))
supp <- c("OJ","VC","OJ","VC","OJ","VC")
dose <- c(0.5,0.5,1.0,1.0,2.0,2.0)
len <- c(13.23,7.98,22.70,16.77,26.06,26.14)
df <- data.frame(supp,dose,len)
#usage of aggregate
#note class of return type. It's dataframe.
timespent[["aggregate"]] = system.time(
aggregate_result <- aggregate(df,list(df$supp),mean))
print(timespent[["aggregate"]])
print(class(aggregate_result))
supp <- c("OJ","VC","OJ","VC","OJ","VC")
dose <- c(0.5,0.5,1.0,1.0,2.0,2.0)
len <- c(13.23,7.98,22.70,16.77,26.06,26.14)
df <- data.frame(supp,dose,len)
timespent = list()
#usage of aggregate
#note class of return type. It's dataframe.
timespent[["aggregate"]] = system.time(
aggregate_result <- aggregate(df,list(df$supp),mean))
print(timespent[["aggregate"]])
print(class(aggregate_result))
install.packages("RJDBC")
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar", " ")
library(RJDBC)
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar", " ")
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar")
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar", identifier.quote="`")
drv <- JDBC("sun.jdbc.odbc.JdbcOdbcDriver","C:/rpackages/lib/ojdbc7.jar", identifier.quote="`")
drv <- JDBC("sun.jdbc.odbc.JdbcOdbcDriver","C:/rpackages/lib/ojdbc7.jar")
drv <- JDBC(driverClass="sun.jdbc.odbc.JdbcOdbcDriver","C:/rpackages/lib/ojdbc7.jar")
library(RJDBC)
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar", " ")
dbDisconnect(con)
library(RJDBC)
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar", " ")
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar", " ")
library(rJava)
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar", " ")
library(RJDBC)
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/rpackages/lib/ojdbc7.jar", " ")
drv <- JDBC("oracle.jdbc.OracleDriver", "C:/app/Nitin/product/11.2.0/dbhome_1/jdbc/lib/ojdbc6.jar", " ")
install.packages("RMySQL")
library(RMySQL)
mydb <- dbConnect(MySQL(), user='root', password='upgradIIITB',
dbname='superstoresdb', host='localhost')
# Here you need to provide actual user, password and DB name which you want to connect.
dbListTables(mydb)
rs <- dbSendQuery(mydb, "select * from market_fact")
data <- fetch(rs, n=-1)
mydb <- dbConnect(MySQL(), user='root', password='upgradIIITB',
dbname='superstoresdb', host='localhost',port='3308')
dbListTables(mydb)
library(RMySQL)
mydb <- dbConnect(MySQL(), user='root', password='upgradIIITB',
dbname='superstoresdb', host='localhost',port=3308)
# Here you need to provide actual user, password and DB name which you want to connect.
dbListTables(mydb)
rs <- dbSendQuery(mydb, "select * from market_fact")
data <- fetch(rs, n=-1)
library(RMySQL)
mydb <- dbConnect(MySQL(), user='root', password='upgradIIITB',
dbname='superstoresdb', host='localhost',port=3308)
# Here you need to provide actual user, password and DB name which you want to connect.
dbListTables(mydb)
rs <- dbSendQuery(mydb, "select * from market_fact")
data <- fetch(rs, n=-1)
#read config file from working directory
config_file <-  read.csv("config.csv",sep="=",stringsAsFactors = F)
#read value of root_dir
base_dir <- config_file$value[1]
#initialize data folder and data file
data_dir <- "data/"
data_file <- "popularity.csv"
#construct data file path from config file
abs_datafile_path <- paste(base_dir,data_dir,data_file, sep="")
# read data file
# adopting this approach deployment team is free
# to configure the location of files in Production environment
popularity_data <- read.csv(abs_datafile_path, stringsAsFactors = F)
setwd("C:/IIITB/crisp-dm/R")
data_dir <- "data/"
#read config file from working directory
config_file <-  read.csv("config.csv",sep="=",stringsAsFactors = F)
#read value of root_dir
base_dir <- config_file$value[1]
#initialize data folder and data file
data_dir <- "data/"
data_file <- "popularity.csv"
#construct data file path from config file
abs_datafile_path <- paste(base_dir,data_dir,data_file, sep="")
# read data file
# adopting this approach deployment team is free
# to configure the location of files in Production environment
popularity_data <- read.csv(abs_datafile_path, stringsAsFactors = F)
#read config file from working directory
config_file <-  read.csv("config.csv",sep="=",stringsAsFactors = F)
#read value of root_dir
base_dir <- config_file$value[1]
#initialize data folder and data file
data_dir <- "data/"
data_file <- "popularity.csv"
#construct data file path from config file
abs_datafile_path <- paste(base_dir,data_dir,data_file, sep="")
# read data file
# adopting this approach deployment team is free
# to configure the location of files in Production environment
popularity_data <- read.csv(abs_datafile_path, stringsAsFactors = F)
View(popularity_data)
View(popularity_data)
install.packages("tidyr")
data <- popularity
newdata <- gather(data, day, my_val, weekday_is_monday:weekday_is_sunday)
str(newdata)
library(tidyr)
library(dplyr)
data <- popularity
newdata <- gather(data, day, my_val, weekday_is_monday:weekday_is_sunday)
str(newdata)
library(tidyr)
library(dplyr)
data <- popularity
newdata <- gather(data, day, my_val, weekday_is_monday:weekday_is_sunday)
str(newdata)
data <- popularity_data
newdata <- gather(data, day, my_val, weekday_is_monday:weekday_is_sunday)
str(newdata)
View(newdata)
#Adding relevant libraries
library(dplyr)
library(compare)
# ------ TODO -- CREATE THE FOLLOWING OBJECTS ----
# filter() mtcars to include cars having 8 cylinders (cyl) and hp > 190
# Store the filtered df as cars_1
cars_1 <- filter(mtcars,cyl == 8 & hp > 100 )
# arrange() cars_1 in descending order of hp
# Store the df as cars_2
cars_2 <- arrange(cars_1,desc(hp)
# group_by the mtcars df by cyl levels
# Store the grouped df as cyl_groups
cyl_groups <- group_by(mtcars,cyl)
# summarise() the cyl_groups created above by average hp
# Store the summarised df as cyl_hp
cyl_hp <- summarise(cyl_groups, mean(hp)
#Adding relevant libraries
library(dplyr)
library(compare)
# ------ TODO -- CREATE THE FOLLOWING OBJECTS ----
# filter() mtcars to include cars having 8 cylinders (cyl) and hp > 190
# Store the filtered df as cars_1
cars_1 <- filter(mtcars,cyl == 8 & hp > 100 )
# arrange() cars_1 in descending order of hp
# Store the df as cars_2
cars_2 <- arrange(cars_1,desc(hp)
# group_by the mtcars df by cyl levels
# Store the grouped df as cyl_groups
cyl_groups <- group_by(mtcars,cyl)
# summarise() the cyl_groups created above by average hp
# Store the summarised df as cyl_hp
cyl_hp <- summarise(cyl_groups, mean(hp))
#Adding relevant libraries
library(dplyr)
library(compare)
# ------ TODO -- CREATE THE FOLLOWING OBJECTS ----
# filter() mtcars to include cars having 8 cylinders (cyl) and hp > 190
# Store the filtered df as cars_1
cars_1 <- filter(mtcars,cyl == 8 & hp > 100 )
# arrange() cars_1 in descending order of hp
# Store the df as cars_2
cars_2 <- arrange(cars_1,desc(hp)
# group_by the mtcars df by cyl levels
# Store the grouped df as cyl_groups
cyl_groups <- group_by(mtcars,cyl)
# summarise() the cyl_groups created above by average hp
# Store the summarised df as cyl_hp
cyl_hp <- summarise(cyl_groups, m=mean(hp))
#Adding relevant libraries
library(dplyr)
library(compare)
# ------ TODO -- CREATE THE FOLLOWING OBJECTS ----
# filter() mtcars to include cars having 8 cylinders (cyl) and hp > 190
# Store the filtered df as cars_1
cars_1 <- filter(mtcars,cyl == 8 & hp > 100 )
# arrange() cars_1 in descending order of hp
# Store the df as cars_2
cars_2 <- arrange(cars_1,desc(hp))
# group_by the mtcars df by cyl levels
# Store the grouped df as cyl_groups
cyl_groups <- group_by(mtcars,cyl)
# summarise() the cyl_groups created above by average hp
# Store the summarised df as cyl_hp
cyl_hp <- summarise(cyl_groups, m=mean(hp))
View(cyl_hp)
library(tidyr)
library(dplyr)
#read config file from working directory
config_file <-  read.csv("config.csv",sep="=",stringsAsFactors = F)
#read value of root_dir
base_dir <- config_file$value[1]
#initialize data folder and data file
data_dir <- "data/"
data_file <- "popularity.csv"
#construct data file path from config file
abs_datafile_path <- paste(base_dir,data_dir,data_file, sep="")
# read data file
# adopting this approach deployment team is free
# to configure the location of files in Production environment
popularity_data <- read.csv(abs_datafile_path, stringsAsFactors = F)
data <- popularity_data
newdata <- gather(data, day, my_val, weekday_is_monday:weekday_is_sunday)
newdata[!(newdata$my_val == 0)]
View(newdata)
View(newdata)
newdata[!(newdata$my_val == 0),]
newdata[!(newdata$my_val == 0),]
newdata <- newdata[!(newdata$my_val == 0),]
avg_weekdays <- newdata %>% group_by(day) %>% summarise(avg = mean(shares))
View(avg_weekdays)
View(avg_weekdays)
avg_weekdays <- newdata %>% group_by(day,-saturday,-sunday) %>% summarise(avg = mean(shares))
View(avg_weekdays)
View(avg_weekdays)
View(newdata)
View(newdata)
sum_weekdays <-  newdata %>% group_by(is_weekend) %>% summarise(s = n())
View(sum_weekdays)
View(sum_weekdays)
View(avg_weekdays)
avg_weekdays <- newdata %>% group_by(day) %>% summarise(avg = mean(shares))
View(avg_weekdays)
View(avg_weekdays)
avg_weekdays <- newdata %>% group_by(is_weekend) %>% summarise(avg = mean(shares))
View(avg_weekdays)
View(avg_weekdays)
avg_weekdays <- newdata %>% group_by(day) %>% summarise(avg = mean(shares))
avg_weekdays <- newdata %>% group_by(is_weekend) %>% summarise(avg = mean(shares))
sum_weekdays <-  newdata %>% group_by(is_weekend) %>% summarise(s = n())
avg_days <- newdata %>% group_by(day) %>% summarise(avg = mean(shares))
View(avg_days)
View(avg_days)
newdata <- gather(data, category, val,  data_channel_is_lifestyle: data_channel_is_world)
newdata <- newdata[!(newdata$val == 0),]
newdata <- gather(newdata, category, val,  data_channel_is_lifestyle: data_channel_is_world)
newdata <- newdata[!(newdata$val == 0),]
library(tidyr)
library(dplyr)
#read config file from working directory
config_file <-  read.csv("config.csv",sep="=",stringsAsFactors = F)
#read value of root_dir
base_dir <- config_file$value[1]
#initialize data folder and data file
data_dir <- "data/"
data_file <- "popularity.csv"
#construct data file path from config file
abs_datafile_path <- paste(base_dir,data_dir,data_file, sep="")
# read data file
# adopting this approach deployment team is free
# to configure the location of files in Production environment
popularity_data <- read.csv(abs_datafile_path, stringsAsFactors = F)
# convert days information from wide to long format
# final data frame contains only asymmetric values
data <- popularity_data
newdata <- gather(data, day, my_val, weekday_is_monday:weekday_is_sunday)
newdata <- newdata[!(newdata$my_val == 0),]
newdata <- gather(newdata, category, val,  data_channel_is_lifestyle: data_channel_is_world)
newdata <- newdata[!(newdata$val == 0),]
avg_weekdays <- newdata %>% group_by(is_weekend) %>% summarise(avg = mean(shares))
sum_weekdays <-  newdata %>% group_by(is_weekend) %>% summarise(s = n())
avg_days <- newdata %>% group_by(day) %>% summarise(avg = mean(shares))
sum_categ <- newdata %>% group_by(is_weekend) %>% summarise(avg = mean(shares))
library(tidyr)
library(dplyr)
#read config file from working directory
config_file <-  read.csv("config.csv",sep="=",stringsAsFactors = F)
#read value of root_dir
base_dir <- config_file$value[1]
#initialize data folder and data file
data_dir <- "data/"
data_file <- "popularity.csv"
#construct data file path from config file
abs_datafile_path <- paste(base_dir,data_dir,data_file, sep="")
# read data file
# adopting this approach deployment team is free
# to configure the location of files in Production environment
popularity_data <- read.csv(abs_datafile_path, stringsAsFactors = F)
# convert days information from wide to long format
# final data frame contains only asymmetric values
data <- popularity_data
newdata <- gather(data, day, my_val, weekday_is_monday:weekday_is_sunday)
newdata <- newdata[!(newdata$my_val == 0),]
newdata <- gather(newdata, category, val,  data_channel_is_lifestyle: data_channel_is_world)
#newdata <- newdata[!(newdata$val == 0),]
avg_weekdays <- newdata %>% group_by(is_weekend) %>% summarise(avg = mean(shares))
sum_weekdays <-  newdata %>% group_by(is_weekend) %>% summarise(s = n())
avg_days <- newdata %>% group_by(day) %>% summarise(avg = mean(shares))
sum_categ <- newdata %>% group_by(is_weekend) %>% summarise(avg = mean(shares))
newdata <- newdata[!(newdata$val == 0),]
library(tidyr)
library(dplyr)
#read config file from working directory
config_file <-  read.csv("config.csv",sep="=",stringsAsFactors = F)
#read value of root_dir
base_dir <- config_file$value[1]
#initialize data folder and data file
data_dir <- "data/"
data_file <- "popularity.csv"
#construct data file path from config file
abs_datafile_path <- paste(base_dir,data_dir,data_file, sep="")
# read data file
# adopting this approach deployment team is free
# to configure the location of files in Production environment
popularity_data <- read.csv(abs_datafile_path, stringsAsFactors = F)
# convert days information from wide to long format
# final data frame contains only asymmetric values
data <- popularity_data
newdata <- gather(data, day, my_val, weekday_is_monday:weekday_is_sunday)
newdata <- newdata[!(newdata$my_val == 0),]
View(newdata)
View(newdata)
View(newdata)
View(newdata)
newdata <- gather(newdata, category, val,  data_channel_is_lifestyle:data_channel_is_world)
newdata <- newdata[!(newdata$val == 0),]
View(newdata)
View(newdata)
sum_categ <- newdata %>% group_by(categort) %>% summarise(avg = mean(shares))
sum_categ <- newdata %>% group_by(category) %>% summarise(avg = mean(shares))
View(sum_categ)
View(sum_categ)
library(swirl)
library(stringr)
install_course()
swirl()
5
library(string4)
library(stringr)
str(bm)
library(swirl)
str(bm)
bye()
library(swirl)
library(stringr)
swirl()
str(bm)
bm
install_course()
